<analysis>
The AI engineer systematically evolved the application through multiple feature additions and critical bug fixes. Initially, a login page customization feature was implemented, allowing dynamic company logo display based on the domain, which involved new SQL for the  field, a new unauthenticated Netlify Function, and frontend modifications to  and . This was followed by a comprehensive password reset functionality, integrating  (later migrated to native v3) and Mailjet for email, necessitating a new backend function and extensive configuration for environment variables. A series of UX enhancements were also delivered: scrollable lists for tickets and productions, a fixed footer, and refined client search layout. The later stages were dominated by debugging persistent infinite API call loops and reCAPTCHA integration issues, leading to iterative refinements in , , , and , often involving , , , and careful management of component dependencies to stabilize network requests and UI behavior.
</analysis>

<product_requirements>
The application is a full-stack support ticket management system for clients, requestors, and agents, featuring CRUD operations, file uploads, text exchanges, and modules for PortabilitÃ©s and Production. JWT authentication is mandatory for all API calls. Recent pre-trajectory enhancements included visual date indicators for portabilities, refined production dashboards, and a modernized Clients page with client-to-society relationships.

During this trajectory, new features and improvements were requested:
1.  **Login Page Customization**: Display a company logo on the login page dynamically based on the connection domain. This requires adding a Domaine field (non-mandatory) to the society creation form and database, and creating an unauthenticated API endpoint to fetch the logo.
2.  **Password Reset Functionality**: Implement a Forgot password? feature on the login page. This involves a modal for email input and reCAPTCHA, a Netlify Function to verify the user (agent or demandeur), generate a secure random password, update the database, and send the new password via email.
3.  **UX Enhancements**:
    *   Improve client search in ticket creation: Initially show 10 clients, then trigger server search on 3+ characters while preserving agent/demandeur roles.
    *   Implement scrollable lists () for Tickets and Productions pages to avoid full-page scrolling.
    *   Make the application's footer always visible at the bottom of the navigation window, without requiring scroll.
    *   Arrange client search fields side-by-side on the Clients page.
4.  **Security Enhancement**: Remove sensitive log information (API keys, domains, emails) from the frontend console during authentication.
5.  **Refactor reCAPTCHA**: Migrate from  (v2) to a native reCAPTCHA v3 implementation, enforcing a score threshold > 0.5.
</product_requirements>

<key_technical_concepts>
-   **React JS**: Frontend development, including hooks (, , , ) for state and lifecycle management.
-   **Netlify Functions (Node.js)**: Serverless backend for API endpoints.
-   **Neon Database (PostgreSQL)**: Primary data storage, with a focus on SQL queries and trigger management ().
-   **JWT Authentication**: Secure user authentication.
-   **Tailwind CSS**: Utility-first CSS for styling.
-   **jsPDF & html2canvas**: Client-side PDF generation (mandatePDF.js).
-   **reCAPTCHA v3 (Google)**: Bot protection, moved from v2 library to native v3 implementation.
-   **Mailjet API**: Email sending for password resets.
</key_technical_concepts>

<code_architecture>
The application uses a full-stack architecture with React.js frontend, Node.js (Netlify Functions) backend, and a Neon (PostgreSQL) database.



-   ****:
    -   **Importance**: Handles user authentication, domain-based logo display, and password reset.
    -   **Changes**: Added logic for domain detection and logo fetching (). Integrated  for smoother UX. Implemented password reset modal and reCAPTCHA v2 (later migrated to v3). Fixed  access. Removed sensitive console logs. Fixed reCAPTCHA display and error handling.
-   ****:
    -   **Importance**: Manages demandeur and society data (CRUD).
    -   **Changes**: Added Domaine field to the society creation/edit form. Implemented loading spinners for form submissions to improve UX.
-   ****:
    -   **Importance**: Defines the application's global layout and navigation.
    -   **Changes**: Initially modified to embed a fixed footer, but this caused issues and was reverted/refactored. Updated Supervision Tickets menu item to Support. Adjusted height handling to fix sidebar rendering and ensure a single, global fixed footer.
-   ****:
    -   **Importance**: Displays and manages support tickets, including client selection.
    -   **Changes**: Implemented scrollable list for tickets (). Renamed page title and menu item to Support. Refactored client search for ticket creation and filtering: removed redundant search fields, integrated server-side search (debounced for 3+ characters), handled agent/demandeur permissions, and fixed continuous API calls using  and carefully managed  dependencies.
-   ****:
    -   **Importance**: Manages production requests.
    -   **Changes**: Implemented scrollable list for productions ().
-   ****:
    -   **Importance**: Manages client data.
    -   **Changes**: Arranged client search fields side-by-side for better UX.
-   ****:
    -   **Importance**: Reusable component for searchable dropdowns.
    -   **Changes**: Modified to support server-side search via an  prop, manage internal  with debouncing, and display loading states. Crucially fixed infinite loop by carefully managing  dependencies (removing ).
-   ****:
    -   **Importance**: Manages global authentication state and API interactions.
    -   **Changes**: Removed sensitive console logs related to authentication and token expiry.
-   ****:
    -   **Importance**: Main application entry point, manages global routing and layout structure.
    -   **Changes**: Restructured the main container using , , , and  to correctly position the global  component (defined outside ) at the bottom of the screen without interfering with internal page scrolling or sidebar layout.
-   ****:
    -   **Importance**: Stores frontend environment variables.
    -   **Changes**: Added  for reCAPTCHA integration.
-   ****:
    -   **Importance**: Backend API for managing society data.
    -   **Changes**: Added  field handling, including validation for domain format. Fixed recurring  errors by explicitly setting  in SQL.
-   ** (NEW)**:
    -   **Importance**: Provides an unauthenticated API to fetch society logo and name based on domain.
    -   **Changes**: Created to query  table using the domain.
-   ** (NEW)**:
    -   **Importance**: Handles the password reset logic on the backend.
    -   **Changes**: Created to validate email, generate secure random passwords, update  or  tables with hashed passwords, send emails via Mailjet, and integrate reCAPTCHA v3 secret key validation (enforcing score > 0.5). Iteratively fixed PostgreSQL trigger issues by separating password and  updates, and corrected Mailjet environment variable names.
-   ****:
    -   **Importance**: Manages backend dependencies.
    -   **Changes**: Added  (for secure password generation) and  (likely implicit for other uses) dependencies.
-   ** (NEW)**:
    -   **Importance**: SQL script to add the  column to the  table.
    -   **Changes**: Defines the  column with a  type and a check constraint () for valid domain format.
-   ** (NEW)**:
    -   **Importance**: SQL script to correct the  constraint.
    -   **Changes**: Provides commands to drop and recreate the constraint with a more permissive regex.
-   ** (NEW)**:
    -   **Importance**: SQL script to resolve recurring PostgreSQL trigger issues (e.g., ) for the password reset tables.
    -   **Changes**: Provides commands to drop and recreate trigger functions to correctly use the  column.
-   ****:
    -   **Importance**: Provides example environment variables.
    -   **Changes**: Updated with Mailjet (, ), reCAPTCHA (, ) variables, reflecting the correct names and usage.
-   ** (NEW)**:
    -   **Importance**: Documentation for the password reset feature.
    -   **Changes**: Detailed guide on the feature, configuration, security, and troubleshooting steps for reCAPTCHA and Mailjet.

</code_architecture>

<pending_tasks>
-   Execute  and .
-   Complete full testing of demandeur transfer.
-   Investigate local authentication failures.
-   Manually execute  on the Neon database.
-   Manually execute  on Neon.
-   Manually execute  on Neon.
-   Manually execute  on Neon.
-   Manually execute  on Neon.
-   Manually execute  on Neon.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was addressing a persistent bug related to infinite API calls () occurring during client search (both in the ticket creation form and the ticket list filter) after typing 3+ characters. The previous attempt to fix this involved using  for flags in  to control initial loads, but this did not resolve the issue.

The ultimate fix implemented was in . The  that triggered the  callback was continuously re-firing because  was included in its dependency array. When the API returned new , the  would re-run, causing another API call, leading to an infinite loop. The resolution was to:
1.  **Separate  hooks**: One  now handles the search logic, triggered only by  and  (with debouncing).
2.  **Remove  from search  dependencies**: This prevents the search API call from being re-triggered when the fetched options change.
3.  A separate  now handles the visual update of  based on the  prop, ensuring the UI reflects the latest data without re-triggering the search.

The services were restarted to apply this critical correction.
</current_work>

<optional_next_step>
Verify with the user if the infinite loop during client search (both in filters and the creation form) has been definitively resolved by the latest changes.
</optional_next_step>
